//////////////////////////////////////////////////////////////////////////////////
//
//	Модуль Динамического Формирования Интерфейса  повторное использование
//
//////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Функция СтруктураЗагружаемыхЭлементовФормы() Экспорт
	
	СтруктураЗагружаемыхЭлементов = Новый Структура;
	
	#Область Реквизиты_формы
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Параметры.Вставить("Properties", Свойства); 
	СтруктураЗагружаемыхЭлементов.Вставить("Attributes", Параметры);
	
	#КонецОбласти
	//- Реквизиты
	
	
	#Область Команды_формы
	
	ЗначенияСвойств = Новый Соответствие;
	ЗначенияСвойств.Вставить("ModifiesSavedData",ТИП("Булево"));
	ЗначенияСвойств.Вставить("CurrentRowUse",КоллекцияИспользованиеТекущейСтроки());
	ЗначенияСвойств.Вставить("Title",ТИП("СписокXDTO"));

	
	// Объект картинки
	Структура = новый структура;
	Структура.Вставить("ref",КоллекцияБиблиотекаКартинок());
	Структура.Вставить("LoadTransparent",ТИП("Булево"));
	ЗначенияСвойств.Вставить("Picture",Структура);
	
	
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Action", "Действие");
	Свойства.Вставить("CurrentRowUse", "ИспользованиеТекущейСтроки");
	Свойства.Вставить("Picture", "Картинка");
	
	
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("ModifiesSavedData", "ИзменяетСохраняемыеДанные");
	Параметры.Вставить("Properties", Свойства); 
	Параметры.Вставить("ЗначенияСвойств", ЗначенияСвойств); 
	
	СтруктураЗагружаемыхЭлементов.Вставить("Command", Параметры);
	#КонецОбласти
	
	#Область Подчиненные_элементы
	ЗначенияСвойств = Новый Соответствие;
	ЗначенияСвойств.Вставить("Group",ГруппировкаПодчиненныхЭлементовФормы());
	ЗначенияСвойств.Вставить("Width", ТИП("Число"));
	ЗначенияСвойств.Вставить("Height", ТИП("Число"));
	ЗначенияСвойств.Вставить("Hyperlink", ТИП("Булево"));

	
	ЗначенияСвойств.Вставить("ТипыКнопок", КоллекцияВидовКнопкиФормы());
	
	
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Group", "Группировка");
	Свойства.Вставить("Width", "Ширина");
	Свойства.Вставить("Height", "Высота");
	Свойства.Вставить("DataPath", "ПутьКданным");
	Свойства.Вставить("Hyperlink", "Гиперссылка");
	
	
	
	Свойства.Вставить("ТипыКнопок", "ТипыКнопок");
	
	
	
	Параметры.Вставить("Properties", Свойства);
	
	Параметры.Вставить("ЗначенияСвойств", ЗначенияСвойств); 
	СтруктураЗагружаемыхЭлементов.Вставить("ChildItems", Параметры);
	
	#КонецОбласти 
	
	Возврат СтруктураЗагружаемыхЭлементов;
	
КонецФункции 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Функция ГруппировкаПодчиненныхЭлементовФормы()
	
	Группировка = Новый Структура;
	Группировка.Вставить("Vertical",ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	Группировка.Вставить("AlwaysHorizontal",ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
	Группировка.Вставить("Horizontal",ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
	Группировка.Вставить("HorizontalIfPossible",ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно);
	
	Возврат Группировка;
КонецФункции

Функция КоллекцияВидовКнопкиФормы()
	ВидыКнопок = Новый Структура;
	ВидыКнопок.Вставить("CommandBarButton",ВидКнопкиФормы.КнопкаКоманднойПанели);
	ВидыКнопок.Вставить("Hyperlink",ВидКнопкиФормы.Гиперссылка);
	ВидыКнопок.Вставить("UsualButton",ВидКнопкиФормы.ОбычнаяКнопка);

	Возврат  ВидыКнопок;
КонецФункции

Функция КоллекцияВидовПолейФормы()
	ВидыПолей = Новый Структура;
	//ВидыПолей.Вставить("CommandBarButton",ВидПоляФормы.);
	Возврат  ВидыПолей;
КонецФункции

// системное перечисление ИспользованиеТекущейСтроки
Функция КоллекцияИспользованиеТекущейСтроки()
	Результат = новый Структура;
	Результат.Вставить("DontUse",ИспользованиеТекущейСтроки.НеИспользует);
	Результат.Вставить("Use",ИспользованиеТекущейСтроки.Использует);
	Результат.Вставить("Auto",ИспользованиеТекущейСтроки.Авто);
	
	Возврат Результат;
КонецФункции

//Библиотека картинок
Функция КоллекцияБиблиотекаКартинок()
	СоответствиеКартинок = Новый Соответствие;
	СоответствиеКартинок.Вставить("StdPicture.CreateListItem",БиблиотекаКартинок.СоздатьЭлементСписка);
	СоответствиеКартинок.Вставить("StdPicture.Change",БиблиотекаКартинок.Изменить);
	СоответствиеКартинок.Вставить("StdPicture.InputFieldOpen",БиблиотекаКартинок.ПолеВводаОткрыть);
	СоответствиеКартинок.Вставить("StdPicture.Delete",БиблиотекаКартинок.Удалить);
	Возврат  СоответствиеКартинок;
КонецФункции

Функция ОбъектДляСборкиЭлементовФормы(ИдентификаторМакета) Экспорт
	
	ТекстСборки = "";
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Макеты.Макет КАК Макет
	|ИЗ
	|	Справочник.pr_МакетыЭлементовФорм КАК Макеты
	|ГДЕ
	|	Макеты.ИдентификаторМакета = &ИдентификаторМакета";
	
	Запрос.УстановитьПараметр("ИдентификаторМакета", ИдентификаторМакета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ТекстСборки = Выборка.Макет.Получить();
		
	КонецЕсли;
	
	   Если ТекстСборки <> "" Тогда
	   
	   	    Читаем = Новый ЧтениеXML;
			Читаем.УстановитьСтроку(ТекстСборки);
			ОбъектДляПостройки = ФабрикаXDTO.ПрочитатьXML(Читаем);
			
		Иначе
			
			ОбъектДляПостройки = Неопределено;
	   
	   КонецЕсли;
	
	Возврат ОбъектДляПостройки;
КонецФункции // МакетЭлементовФормы()()
 
#КонецОбласти

